<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从DVC谈起</title>
    <link href="/2022/04/10/talk-from-dvc/"/>
    <url>/2022/04/10/talk-from-dvc/</url>
    
    <content type="html"><![CDATA[<h3 id="一-dvc第一个视频压缩端到端框架"><a class="markdownIt-Anchor" href="#一-dvc第一个视频压缩端到端框架"></a> 一、DVC：第一个视频压缩端到端框架</h3><p><img src="https://raw.githubusercontent.com/Joeyrr/blog-img/main/talk-from-dvc_DVC.png" alt="DVC"></p><p>上交鲁国博士（现北理助理教授）于 CVPR2019 提出了首个端到端视频编码框架，是端到端视频编码的开山之作，整体架构与传统视频编码的架构保持一致，但整个编码器使用神经网络实现了端到端的视频编码。</p><p>DVC框架整体可以分为四个重要的子网络：</p><ul><li><p>光流估计</p></li><li><p>MV编解码</p></li><li><p>运动补偿</p></li><li><p>残差编解码</p></li><li><p>码率估计</p></li></ul><p>回顾传统编码框架，大体上可以分为六个步骤，即：运动估计、运动补偿、变换量化、反变换、熵编码、帧重建。DVC 严格按照传统框架进行设计，如图所示，其中蓝框所示模块为编码端独有，白框所示模块组成解码器，整个网络采取端到端的训练方式，整体Loss同样模仿传统率失真函数，由原始帧、重建帧和码率估计值计算得到，即：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mi>D</mi><mo>+</mo><mi>R</mi><mo>=</mo><mi>λ</mi><mi>d</mi><mrow><mo fence="true">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo separator="true">,</mo><msub><mover accent="true"><mi>x</mi><mo>^</mo></mover><mi>t</mi></msub><mo fence="true">)</mo></mrow><mo>+</mo><mrow><mo fence="true">(</mo><mi>H</mi><mrow><mo fence="true">(</mo><msub><mover accent="true"><mi>m</mi><mo>^</mo></mover><mi>t</mi></msub><mo fence="true">)</mo></mrow><mo>+</mo><mi>H</mi><mrow><mo fence="true">(</mo><msub><mover accent="true"><mi>y</mi><mo>^</mo></mover><mi>t</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\lambda D+R=\lambda d\left(x_{t}, \hat{x}_{t}\right)+\left(H\left(\hat{m}_{t}\right)+H\left(\hat{y}_{t}\right)\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>(传统编码率失真函数为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>+</mo><mi>λ</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">D+\lambda R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span>，这里拉格朗日乘子<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 并未和传统编码器保持一致)</p><h4 id="dvc-设计要点"><a class="markdownIt-Anchor" href="#dvc-设计要点"></a> DVC 设计要点</h4><ol><li>原始帧和重建帧（前一帧）输入光流估计网络 Spatial Pyramid Network (SPyNet) 获得像素级运动矢量</li><li>运动矢量使用 Balle 所提出的经典端到端图像压缩框架进行编解码</li></ol><div align="center"> <img src="https://raw.githubusercontent.com/Joeyrr/blog-img/main/talk-from-dvc_MV-net.png" width="50%" height="50%"></div><ol start="3"><li>运动补偿网络使用卷积神经网络实现，具体如下:</li></ol><div align="center"> <img src="https://raw.githubusercontent.com/Joeyrr/blog-img/main/talk-from-dvc_MC-net.png" width="50%" height="50%"></div><ol><li>残差编解码网络和码率估计借鉴 Balle 端到端图像压缩改进模型：</li></ol><div align="center"> <img src="https://raw.githubusercontent.com/Joeyrr/blog-img/main/talk-from-dvc_Resi-net.png" width="80%" height="80%"></div><p>由于该端到端框架并不是基于块的编码，且运动补偿网络将解码前一帧、运动补偿帧和运动矢量concatenate后获得补偿后帧，该过程实现了类似传统框架中的环路滤波的效果。</p><p>注意，由于量化过程不可导，这里在训练过程中增加了均匀噪声，和 Balle 的做法一致。</p><p>DVC作为端到端视频编码的开山之作，主体网络结构借鉴于 Balle 的端到端图像压缩框架，从性能上看，在低码率情况下能和 libx265 veryfast 预设下效率相当，优于 libx264，该性能表现还是比较不错的。但该架构也存在不足之处，比如文中也提到过，网络仅将前一帧作为参考帧，所以压缩性能比不过使用了多参考帧的传统框架也是理所当然的；此外，模型似乎局限于较低码率场景下。考虑后续的改进，一方面可以增加多参考帧，另一方面可以改进失真度量方式，以更符合人眼主观感知特性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Deep Codec</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈视频编码</title>
    <link href="/2022/03/27/talk-about-video-coding/"/>
    <url>/2022/03/27/talk-about-video-coding/</url>
    
    <content type="html"><![CDATA[<p>随着社交网络与移动互联网井喷式的发展，视频内容已经占据了全球互联网五分之四的流量。而今，我们无时无刻不在与视频打交道，视频俨然已成为我们日常生活中不可或缺的一种信息载体，作为一种极富表达力的媒介，它有着文字与图片难以企及的传情达意之功用。在平时生活中我们观看视频，分享视频，拍摄视频，大多数人会以为视频就是一帧帧的图片的堆叠，正如播放时所看到的那样，由无数个色彩斑斓的像素点构成，也许只有在需要自己剪辑视频时，抑或是自己化身主播，搭建一个简易的直播系统时面对满屏纷繁复杂的视频编码参数而一头雾水，才会意识到，互联网上无处不在的视频似乎并不是我们想象中的那么简单。</p><p>事实上，我们平时所看到的视频都是解码完成后的视频，而视频本身需要被编码成一定格式后才能在互联网上传输与存储。那么视频能否不编码而直接用于存储与传输呢，我们可以试想一下，一张未经压缩的1920x1080的彩色图片，包含1920x1080x3个字节，占用约6MB的存储空间，假如视频帧率为30fps，那么未经压缩的1080p的视频一秒钟便需要占用超过180MB的存储空间，这样的数据量是惊人的。如若不对视频进行编码压缩，视频内容的传输与存储会给网络以及终端设备带来不可承受的负担。</p><p>数字视频编码技术最早可以追溯到上世纪五十年代初，计算机的诞生提供了海量数据编码的算力基础，香农信息论的提出奠定了熵编码理论基础，但此时的编码技术主要停留在逐像素基于统计模型的编码。直到上世纪八十年代，H.261标准的提出与制定成为现代视频编码标准的里程碑，此后，基于图像块的预测-变换混合编码框架一直沿用至今。随后，国际电信联盟ITU继续制定了H.26x系列标准，移动图像专家组MPEG同期制定了MPEG-x系列标准，其中为人所熟知的是两个组织合作推出的H.262/MPEG-2、H.264/MPEG-4 AVC、H.265/HEVC以及2020年崭新出炉的H.266/VVC标准。在视频编码的领域里，人们也有着类似摩尔定律但并不准确的经验性总结，也即编码标准每十年一次更新，新标准能比旧标准提高50%的压缩效率。</p><p>正所谓长江后浪推前浪，新的标准往往是对旧标准各个模块的一次全方位升级，而自H.261起所确定的编码框架却至今未变。具体来说，现代编码标准大体由四部分构成，即预测编码、变换量化、熵编码与环路滤波。一帧图像首先会被划分为一个个的编码块作为基本的编码单元，从先前已经被编码的图像帧的重建帧上找到和当前块最相似的像素块作为预测块，与当前编码块相减获得残差，这个过程便是预测编码；对预测残差进行数学上的线性变换得到更紧凑的表示形式，之后对变换系数进行量化，这便完成了变换量化过程；将量化系数送入熵编码模块进行熵编码，之后进行封装后便得到了编码后的码流。由于编码是分块进行的，通过上述操作编码后重建的图像在视觉上能感受到明显的块效应，这时就需要引入环路滤波模块，对重建帧上编码块边缘位置进行压缩噪声的滤除，通过环路滤波模块来提高重建帧质量，进而提高了预测编码性能，从而获得更好的压缩性能。</p><p>近年来深度神经网络在计算机视觉任务上取得了巨大成功，也给视频编码领域注入了新的活力，通过引入神经网络来提高视频编码性能成为了研究的热点。现有的研究大体可以分为基于神经网络的模块化优化和端到端优化。模块化优化是指，用训练好的网络模型来替换传统编码框架中的某一模块，或者作为一个插件嵌入传统框架之中，这种做法的好处是不改变原有编码框架及码流格式，与传统编码框架完全兼容。缺点体现在网络模型的引入大幅提高了编解码器的计算复杂度，对于一些算力较低的终端设备往往是难以承受的。所以对于模块化优化的方案，如何设计轻量的网络模型，在性能和复杂度之间取得折中是其实际落地时的一个难点。而端到端的模型则是一种革命性的方案，鉴于端到端模型在图像压缩领域取得了巨大成功，在其基础上，近来的一些端到端视频压缩方案试图通过更准确的光流预测和码流的上下文建模来提高视频压缩效率。现有的端到端的方案在压缩效率上已经逼近甚至超过当前主流的传统编码器，但受限于终端算力，模型的部署同样是一大难点。</p><p>总的来看，在可以预见的五到十年间，基于传统的混合编码框架仍然是主流的视频编码方式，且通过更加精细化的设计与调优，传统编码器性能仍有进一步提升的空间。同时随着设备算力的提升和针对深度学习优化的芯片架构的发展，以及神经网络模型的迭代和性能提升，端到端的视频编码有着十分广阔的发展前景，可以期待不久的将来端到端的模型给视频编码领域带来真正的变革。</p>]]></content>
    
    
    <categories>
      
      <category>Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1970/01/01/hello-world/"/>
    <url>/1970/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
